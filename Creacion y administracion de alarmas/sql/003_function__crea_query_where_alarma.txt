-- Function: crea_query_where_alarma(id_sen int4, id_camp int4, id_alg int4, p1 float8, p2 float8, reg varchar, v1 float8, v2 float8 )

--DROP FUNCTION crea_query_where_alarma(id_sen int4, id_camp int4, id_alg int4, p1 float8, p2 float8, reg varchar, v1 float8, v2 float8 );

CREATE OR REPLACE FUNCTION crea_query_where_alarma(id_sen int4, id_camp int4, id_alg int4, p1 float8, p2 float8, reg varchar, v1 float8, v2 float8 )
  RETURNS "varchar" AS
$BODY$

-- Declarar variables locales
DECLARE
sNombreTabla$ varchar(100);
sNombreCampo$ varchar(100);
sQueryField$ varchar(100);
sQuery$ varchar;

BEGIN
-- Inicializar string con la clausula a retornar
sQuery$ = '';

-- Definir nombre de la tabla
SELECT	nombre_tabla
INTO	sNombreTabla$
FROM	sensor.camposalarma
WHERE	sensores_id = id_sen AND
id = id_camp;
	
-- Definir nombre del campo
SELECT	nombre_campo
INTO	sNombreCampo$
FROM	sensor.camposalarma
WHERE	id = id_camp;

-- Guarda variable con el "esquema.tabla.campo"
sQueryField$ = sNombreTabla$ || '.' || sNombreCampo$;

-- Crear condicion en base a la regla
IF reg = 'mayorIgual'
THEN sQuery$ = sQuery$ || sQueryField$ || ' >= ' || v1;

ELSIF reg = 'menorIgual'
THEN sQuery$ = sQuery$ || sQueryField$ || ' <= ' || v1;

ELSIF reg = 'entre'
THEN sQuery$ = sQuery$ || sQueryField$ || ' >= ' || v1 || ' AND ' || sQueryField$ || ' <= ' || v2;

ELSIF reg = 'noEntre'
THEN sQuery$ = sQuery$ || sQueryField$ || ' <= ' || v1 || ' OR ' || sQueryField$ || ' >= ' || v2;
END IF;

return sQuery$;
END;


$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
ALTER FUNCTION crea_query_where_alarma(id_sen int4, id_camp int4, id_alg int4, p1 float8, p2 float8, reg varchar, v1 float8, v2 float8 ) OWNER TO postgres;